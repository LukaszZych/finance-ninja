import { Actions, Effect, ofType } from '@ngrx/effects';import { Injectable } from '@angular/core';import { AdminService } from '../../services/admin.service';import { Observable, of } from 'rxjs';import { Action } from '@ngrx/store';import * as adminActions from '../actions/admin.actions';import { catchError, map, switchMap, tap } from 'rxjs/operators';import { FullUser } from '../../models/full-user.model';import { MatSnackBar } from '@angular/material';@Injectable()export class AdminEffects {  constructor(private action$: Actions,              private adminService: AdminService,              private snackBar: MatSnackBar) {  }  @Effect()  getUsers: Observable<Action> = this.action$    .pipe(      ofType(adminActions.GET_USERS),      switchMap((action: adminActions.GetUsers) => {        return this.adminService.getAllUsers(action.payload)          .pipe(            map((users: FullUser[]) => {              return new adminActions.GetUsersSuccess(users);            }),            catchError((error) => of(new adminActions.GetUsersFail(error)))          );      })    );  @Effect()  removeUser: Observable<Action> = this.action$    .pipe(      ofType(adminActions.REMOVE_USER),      switchMap((action: adminActions.RemoveUser) => {        return this.adminService.removeUser(action.payload.token, action.payload.id)          .pipe(            map((users: FullUser) => {              return new adminActions.RemoveUserSuccess(users);            }),            catchError((error) => of(new adminActions.RemoveUserFail(error)))          );      })    );  @Effect({ dispatch: false })  removeUserSuccess: Observable<Action> = this.action$    .pipe(      ofType(adminActions.REMOVE_USERS_SUCCESS),      tap(() => {        this.snackBar.open(`Account removed!`, null, {          duration: 3000        });      }),    );  @Effect({ dispatch: false })  removeUserFail: Observable<Action> = this.action$    .pipe(      ofType(adminActions.REMOVE_USERS_FAIL),      tap(() => {        this.snackBar.open(`Error - account could not be removed!`, null, {          duration: 3000        });      }),    );}