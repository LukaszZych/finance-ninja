import { User } from '../../../authentication/models/user.model';import * as fromUsers from '../actions/user.actions';import * as fromIncomes from '../actions/income.actions';import * as fromExpenses from '../actions/expense.actions';// interfejs tylko dla tej części stanu w tym moduleexport interface FinancesState {  user: User;  loading: boolean;}// inicjalny stan tylko dla tej części stanu w tym moduleexport const initialFinancesState: FinancesState = {  user: {    email: '',    expenses: [],    incomes: [],    isAdmin: false,    _id: ''  },  loading: false};export function financesReducer(state = initialFinancesState, action: fromUsers.UserActions | fromIncomes.IncomeActions | fromExpenses.ExpenseActions): FinancesState {  switch (action.type) {    case fromUsers.LOAD_USER: {      return { ...state, user: {...state.user}, loading: true };    }    case fromUsers.LOAD_USER_SUCCESS: {      return { user: action.payload, loading: false };    }    case fromUsers.LOAD_USER_FAIL: {      return { ...state, user: {...state.user}, loading: false };    }    case fromIncomes.ADD_INCOME: {      return {        ...state, user: {          ...state.user,          incomes: [...state.user.incomes, action.income]        }      };    }    case fromIncomes.REMOVE_INCOME: {      return {        ...state,        user: {          ...state.user,          incomes: state.user.incomes.filter((income) => {              return income._id !== action.incomeId;            })          }      };    }    case fromExpenses.ADD_EXPENSE: {      return {        ...state,        user: {          ...state.user,          expenses: [...state.user.expenses, action.expense]        }      };    }    case fromExpenses.REMOVE_EXPENSE: {      return {        ...state, user:          {            ...state.user,            expenses: state.user.expenses.filter((expense) => {              return expense._id !== action.expenseId;            })          }      };    }    case fromIncomes.INCOME_RESET_ALL:    case fromExpenses.EXPENSE_RESET_ALL: {      return { ...initialFinancesState };    }    default:      return state;  }}// funkcje które zwracają części / propertki z tego stanu, będą przydatne do selectorówexport const getFinancesUser = (state: FinancesState) => state.user;export const getFinancesUserExpenses = (state: FinancesState) => state.user.expenses;export const getFinancesUserIncomes = (state: FinancesState) => state.user.incomes;export const getFinancesLoading = (state: FinancesState) => state.loading;