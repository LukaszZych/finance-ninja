import { Injectable } from '@angular/core';import { Actions, Effect, ofType } from '@ngrx/effects';import { UserService } from '../../services/user.service';import { Observable, of } from 'rxjs';import { Action } from '@ngrx/store';import { catchError, map, switchMap } from 'rxjs/operators';import { User } from '../../../authentication/models/user.model';import * as userActions from '../actions/user.actions';@Injectable()export class UserEffects {  constructor(private action$: Actions,              private userService: UserService) {  }  @Effect()  loadUserData: Observable<Action> = this.action$    .pipe(      ofType(userActions.LOAD_USER),      map((action: userActions.LoadUser) => action.token),      switchMap((token: string) => {        return this.userService.getCurrentUser(token)          .pipe(            map((user: User) => {              return new userActions.LoadUserSuccess(user);            }),            catchError((error) => of(new userActions.LoadUserFail(error)))          );      })    );}