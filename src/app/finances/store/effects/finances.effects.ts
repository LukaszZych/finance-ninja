import { Injectable } from '@angular/core';import { Actions, Effect, ofType } from '@ngrx/effects';import { UserService } from '../../services/user.service';import { Observable, of } from 'rxjs';import { Action } from '@ngrx/store';import { catchError, map, switchMap, tap } from 'rxjs/operators';import { User } from '../../../authentication/models/user.model';import { IncomeService } from '../../services/income.service';import * as userActions from '../actions/user.actions';import * as incomeActions from '../actions/income.actions';import * as expenseActions from '../actions/expense.actions';import { Income } from '../../models/income.model';@Injectable()export class FinancesEffects {  constructor(private action$: Actions,              private userService: UserService,              private incomeService: IncomeService) {  }  @Effect()  loadUser: Observable<Action> = this.action$    .pipe(      ofType(userActions.LOAD_USER),      map((action: userActions.LoadUser) => action.token),      switchMap((token: string) => {        return this.userService.getCurrentUser(token)          .pipe(            map((user: User) => {              return new userActions.LoadUserSuccess(user);            }),            catchError((error) => of(new userActions.LoadUserFail(error)))          );      })    );  @Effect()  addIncome: Observable<Action> = this.action$    .pipe(      ofType(incomeActions.ADD_INCOME),      tap(() => console.log('add income!')),      switchMap((action: incomeActions.AddIncome) => {        return this.incomeService.addIncome(action.income, action.token)          .pipe(            map((income: Income) => {              return new incomeActions.AddIncomeSuccess(income);            }),            catchError((error) => of(new incomeActions.AddIncomeFail(error)))          );      })    );  @Effect()  removeIncome: Observable<Action> = this.action$    .pipe(      ofType(incomeActions.REMOVE_INCOME),      tap(() => console.log('remove income!')),      switchMap((action: incomeActions.RemoveIncome) => {        return this.incomeService.removeIncome(action.incomeId, action.token)          .pipe(            map((income: Income) => {              return new incomeActions.RemoveIncomeSuccess(income);            }),            catchError((error) => of(new incomeActions.RemoveIncomeFail(error)))          );      })    );}