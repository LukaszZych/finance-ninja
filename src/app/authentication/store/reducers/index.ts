import * as fromAuth from './auth.reducers';import { ActionReducerMap, createFeatureSelector, createSelector } from '@ngrx/store';export interface AuthenticationState {  authenticationState: fromAuth.AuthState;}// To będzie rejestrowane w module!! Powstanie obiekt: {authenticationFeature: {authenticationState: { toCoWStanie }}}export const authenticationReducers: ActionReducerMap<AuthenticationState> = {  authenticationState: fromAuth.authReducer,};export * from './auth.reducers';// selector zwracający główny stan całego feature'a - taka sama nazwa jak w rejestracji w feature module// {glownaNazwa: {authenticationState: { toCoWStanie }}}export const getAuthenticationFeatureState = createFeatureSelector<AuthenticationState>('authenticationFeature');// niższy selector zwracający mniejszy wycinek głównego stanu {authenticationState: { toCoWStanie }}export const getAuthenticationState = createSelector(getAuthenticationFeatureState, (state: AuthenticationState) => {  return state.authenticationState;});// // jeszcze niższy wycinem stanu: tokenexport const getAunthenticationToken = createSelector(getAuthenticationState, fromAuth.getAuthToken);// jeszcze niższy wycinem stanu: loadingexport const getAunthenticationIsLoading = createSelector(getAuthenticationState, fromAuth.getAuthLoading);// jeszcze niższy wycinem stanu: isAdminexport const getAunthenticationIsAdmin = createSelector(getAuthenticationState, fromAuth.getAuthIsAdmin);