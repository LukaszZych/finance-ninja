import { Injectable } from '@angular/core';import { Actions, Effect, ofType } from '@ngrx/effects';import { AuthenticationService } from '../../services';import { Observable, of } from 'rxjs';import { Action } from '@ngrx/store';import * as authActions from '../actions/auth.actions';import { catchError, map, switchMap, tap } from 'rxjs/operators';import { Credentials } from '../../models/credentials.model';import { Router } from '@angular/router';import { MatSnackBar } from '@angular/material';import { CreatedUser } from '../../models/created-user.model';@Injectable()export class AuthEffects {  constructor(private action$: Actions,              private authenticationService: AuthenticationService,              private router: Router,              private snackBar: MatSnackBar) {  }  @Effect()  logIn: Observable<Action> = this.action$    .pipe(      ofType(authActions.LOG_IN),      map((action: authActions.LogIn) => action.payload),      switchMap((credentials: Credentials) => {        return this.authenticationService.logIn(credentials)          .pipe(            map((token: string) => {              return new authActions.LogInSuccess(token);            }),            catchError((error) => of(new authActions.LogInFail(error)))          );      })    );  // @Effect()  // signIn: Observable<Action> = this.action$  //   .pipe(  //     ofType(authActions.SIGN_IN),  //     map((action: authActions.SignIn) => action.payload),  //     switchMap((credentials: Credentials) => {  //       return this.authenticationService.createUser(credentials)  //         .pipe(  //           map((createdUser: CreatedUser) => {  //             return new authActions.LogInSuccess(createdUser.token);  //           }),  //           catchError((error) => of(new authActions.LogInFail(error)))  //         );  //     })  //   );  @Effect({ dispatch: false })  logInSuccess = this.action$    .pipe(      ofType(authActions.LOG_IN_SUCCESS),      map((action: authActions.LogInSuccess) => action.payload),      tap((payload: string) => {        localStorage.setItem('financeNinjaToken', payload);        // this.router.navigate([`/data`]);      }),    );  @Effect({ dispatch: false })  logOut: Observable<Action> = this.action$    .pipe(      ofType(authActions.LOG_OUT),      tap(() => {        localStorage.removeItem('financeNinjaToken');        this.snackBar.open(`Logout successful`, null, {          panelClass: 'force-center',          duration: 3000        });      })    );}