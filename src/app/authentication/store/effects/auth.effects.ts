import { Injectable } from '@angular/core';import { Actions, Effect, ofType } from '@ngrx/effects';import { AuthenticationService } from '../../services';import { Observable, of } from 'rxjs';import { Action } from '@ngrx/store';import * as authActions from '../actions/auth.actions';import { catchError, map, switchMap, tap } from 'rxjs/operators';import { Credentials } from '../../models/credentials.model';import { Router } from '@angular/router';import { MatSnackBar } from '@angular/material';@Injectable()export class AuthEffects {  constructor(private action$: Actions,              private authenticationService: AuthenticationService,              private router: Router,              private snackBar: MatSnackBar) {  }  @Effect()  logIn: Observable<Action> = this.action$    .pipe(      ofType(authActions.LOG_IN),      tap(() => console.log('log in!')),      map((action: authActions.LogIn) => action.payload),      switchMap((credentials: Credentials) => {        return this.authenticationService.logIn(credentials)          .pipe(            map((token: string) => {              return new authActions.LogInSuccess(token);            }),            catchError((error) => of(new authActions.LogInFail(error)))          );      })    );  @Effect({ dispatch: false })    logInSuccess = this.action$      .pipe(        ofType(authActions.LOG_IN_SUCCESS),        map((action: authActions.LogInSuccess) => action.token),        tap((token: string) => {          localStorage.setItem('financeNinjaToken', token);          this.router.navigate([`/data`]);        }),      );  @Effect({ dispatch: false })  logInFail = this.action$    .pipe(      ofType(authActions.LOG_IN_FAIL),      map((action: authActions.LogInFail) => action.error),      tap((error: any) => {        this.snackBar.open(`Login fail. Please try again later.`, null, {          panelClass: 'force-center',          duration: 3000        });      }),    );  @Effect()  signIn: Observable<Action> = this.action$    .pipe(      ofType(authActions.SIGN_IN),      map((action: authActions.SignIn) => action.payload),      switchMap((credentials: Credentials) => {        return this.authenticationService.createUser(credentials)          .pipe(            map((token: string) => {              return new authActions.SignInSuccess(token);            }),            catchError((error) => of(new authActions.SignInFail(error)))          );      })    );  @Effect({ dispatch: false })  signInSuccess = this.action$    .pipe(      ofType(authActions.SIGN_IN_SUCCESS),      map((action: authActions.SignInSuccess) => action.token),      tap((token: string) => {        localStorage.setItem('financeNinjaToken', token);        // this.router.navigate([`/data`]);      }),    );  @Effect({ dispatch: false })  signInFail = this.action$    .pipe(      ofType(authActions.SIGN_IN_FAIL),      map((action: authActions.SignInFail) => action.error),      tap((payload: any) => {        this.snackBar.open(`Sign In fail. Please try again later.`, null, {          panelClass: 'force-center',          duration: 3000        });      }),    );  @Effect({ dispatch: false })  logOut: Observable<Action> = this.action$    .pipe(      ofType(authActions.LOG_OUT),      tap(() => {        localStorage.removeItem('financeNinjaToken');        this.snackBar.open(`Logout successful`, null, {          panelClass: 'force-center',          duration: 3000        });        this.router.navigate([`/`]);      })    );}