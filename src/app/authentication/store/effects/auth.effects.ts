import { Injectable } from '@angular/core';import { Actions, Effect, ofType } from '@ngrx/effects';import { AuthenticationService } from '../../services';import { Observable, of } from 'rxjs';import { Action } from '@ngrx/store';import * as authActions from '../actions/auth.actions';import { catchError, map, switchMap, tap } from 'rxjs/operators';import { Credentials } from '../../models/credentials.model';import { Router } from '@angular/router';import { MatSnackBar } from '@angular/material';import { TokenService } from '../../services/token.service';import { TranslateService } from '@ngx-translate/core';@Injectable()export class AuthEffects {  constructor(private action$: Actions,              private authenticationService: AuthenticationService,              private router: Router,              private tokenService: TokenService,              private snackBar: MatSnackBar,              private translateService: TranslateService) {  }  @Effect()  logIn: Observable<Action> = this.action$    .pipe(      ofType(authActions.LOG_IN),      map((action: authActions.LogIn) => action.payload),      switchMap((credentials: Credentials) => {        return this.authenticationService.logIn(credentials)          .pipe(            map((token: string) => {              const decoded = this.tokenService.decodeToken(token);              return new authActions.LogInSuccess({token: token, isAdmin: decoded.isAdmin});            }),            catchError((error) => of(new authActions.LogInFail(error)))          );      })    );  @Effect({ dispatch: false })    logInSuccess = this.action$      .pipe(        ofType(authActions.LOG_IN_SUCCESS),        map((action: authActions.LogInSuccess) => action.payload.token),        tap((token: string) => {          localStorage.setItem('financeNinjaToken', token);          this.router.navigate([`/add-data`]);        }),      );  @Effect({ dispatch: false })  logInFail = this.action$    .pipe(      ofType(authActions.LOG_IN_FAIL),      map((action: authActions.LogInFail) => action.error),      tap((error: any) => {        this.snackBar.open(this.translateService.instant('NOTIFICATIONS.AUTHENTICATION.LOG_IN_FAIL'), null, {          duration: 3000        });      }),    );  @Effect()  signUp: Observable<Action> = this.action$    .pipe(      ofType(authActions.SIGN_UP),      map((action: authActions.SignUp) => action.payload),      switchMap((credentials: Credentials) => {        return this.authenticationService.createUser(credentials)          .pipe(            map((response: {token: string}) => {              return new authActions.SignUpSuccess(response.token);            }),            catchError((error) => of(new authActions.SignUpFail(error)))          );      })    );  @Effect({ dispatch: false })  signUpSuccess = this.action$    .pipe(      ofType(authActions.SIGN_UP_SUCCESS),      map((action: authActions.SignUpSuccess) => action.token),      tap((token: string) => {        localStorage.setItem('financeNinjaToken', token);        this.router.navigate([`/add-data`]);      }),    );  @Effect({ dispatch: false })  signUpFail = this.action$    .pipe(      ofType(authActions.SIGN_UP_FAIL),      map((action: authActions.SignUpFail) => action.error),      tap((payload: any) => {        this.snackBar.open(this.translateService.instant('NOTIFICATIONS.AUTHENTICATION.SIGN_UP_FAIL'), null, {          duration: 3000        });      }),    );  @Effect({ dispatch: false })  logOut: Observable<Action> = this.action$    .pipe(      ofType(authActions.LOG_OUT),      tap(() => {        localStorage.removeItem('financeNinjaToken');        this.snackBar.open(this.translateService.instant('NOTIFICATIONS.AUTHENTICATION.LOG_OUT_SUCCESS'), null, {          duration: 3000        });        this.router.navigate([`/`]);      })    );}